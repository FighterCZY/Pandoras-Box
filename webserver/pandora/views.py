from django.template import Context, loader
from django.shortcuts import render_to_response
from django.views.decorators.http import condition
from django.http import HttpResponse

import xmlrpclib
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA
from Crypto.Util.number import long_to_bytes, bytes_to_long
rpc = xmlrpclib.ServerProxy('http://localhost:8000')
def sign(rsa, data):
  # returns a signature of data
  hash = SHA.new(data).digest()
  (signature, ) = rsa.sign(hash, None)
  return long_to_bytes(signature)

def encrypt(rsa, data):
  (encrypted, ) = rsa.encrypt(data, None)
  return encrypted

def decrypt(rsa, data):
  if not rsa._randfunc:
    rsa._randfunc = Random.new().read
  return rsa.decrypt(data)

def index(request):
  return render_to_response('pandora/index.html', {})

@condition(etag_func=None)
def register(request):
  def stream_response_generator():
    GET = request.GET
    username = GET.get('username')
    passphrase = GET.get('passphrase')
    
    yield "<p>Generating Key</p>"
    yield " " * 1024  # Encourage browser to render incrementally
    rsa = RSA.generate(1024)
    request.session['username'] = username
    request.session['rsa'] = rsa
    
    publicrsa = rsa.exportKey('OpenSSH')
    yield "<p>Register User: %s</p>" % rpc.registerUser(username, publicrsa)
    
    privatersa = str(rsa.exportKey('PEM', passphrase))
    signature = sign(rsa, privatersa)
    yield "<p>Register Key: %s</p>" % rpc.registerKey(username, signature, privatersa)
    
    yield "<p>Registered User: '%s' with passphrase '%s'</p>" % (username, passphrase)
    
  return HttpResponse( stream_response_generator(), mimetype='text/html')

def login(request):
  GET = request.GET
  username = GET.get('username')
  request.session['username'] = username
  passphrase = GET.get('passphrase')
  privatersa = rpc.getKey(username)
  if not privatersa:
    return HttpResponse("Username not found")
  try:
    rsa = RSA.importKey(privatersa, passphrase)
  except ValueError:
    return HttpResponse("Invalid passphrase")
  request.session['rsa'] = rsa
  return HttpResponse("Logged in successfully %s" % request.session.get('username'))
  
@condition(etag_func=None)
def upload(request):
  def stream_response_generator():
    path = "blah"
    data = "hello world"
    key = "abc123" #autogenerated
    username = request.session.get('username')
    
    rsa = request.session.get('rsa')
    
    files = rpc.poll(request.session.get('username'))
    if not files:
      files = ''
    else:
      files = decrypt(rsa, files)
    yield "<p>Poll: %s</p>" % files
    yield " " * 1024  # Encourage browser to render incrementally
    
    data = encrypt(rsa, data)
    signature = sign(rsa, key)
    yield data
    yield "<p>Add data: %s</p>" % rpc.addData(username, signature, key, data)

    files += "%s:%s\n" % (path, key)
    files = encrypt(rsa, files)
    yield files
    yield "<p>Update File: %s</p>" % rpc.updateFile(username, sign(rsa, files), files)
  
  return HttpResponse( stream_response_generator(), mimetype='text/html')
  
def list(request):
  username = request.session.get('username')
  files = rpc.poll(username)
  if not files:
    return HttpResponse("No filelist for user")
  rsa = request.session.get('rsa')
  list = decrypt(rsa, files)
  return HttpResponse(list)
  
def show(request):
  pass
